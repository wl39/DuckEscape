final class Obstacle {
    int[][] toothBrush = { // 1 - 8
        {0, 3, 4, 0, 0, 0, 0, 0, 0, 2},
        {3, 3, 5, 6, 1, 1, 1, 1, 2, 0},
        {8, 3, 4, 6, 1, 7, 2, 7, 2, 7},
        {8, 3, 5, 6, 7, 2, 7, 2, 7, 0},
        {8, 3, 4, 6, 1, 1, 1, 2, 0, 0},
        {8, 3, 5, 6, 1, 7, 1, 7, 2, 7},
        {8, 3, 5, 6, 7, 2, 7, 2, 7, 2},
        {8, 3, 4, 6, 1, 1, 2, 1, 2, 2},
        {8, 3, 5, 6, 1, 7, 1, 2, 0, 0},
        {8, 3, 5, 6, 7, 2, 7, 7, 7, 0},
        {8, 3, 5, 6, 1, 1, 1, 1, 2, 0},
        {3, 3, 4, 0, 0, 0, 0, 0, 0, 2},
        {0, 3, 5, 0, 0, 0, 0, 0, 0, 0},
        {0, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
        {3, 3, 4, 5, 0, 0, 0, 0, 0, 0},
    };

    int[][] shampoo = { // 10 - 
        {00, 10, 10, 10, 10, 10, 00, 00, 00, 00},
        {10, 10, 10, 11, 11, 11, 11, 11, 11, 00},
        {11, 11, 11, 11, 11, 12, 12, 12, 12, 13},
        {00, 11, 12, 13, 00, 00, 00, 00, 13, 00},
        {00, 00, 12, 12, 13, 00, 00, 00, 00, 00},
        {00, 00, 11, 12, 13, 00, 00, 00, 00, 00},
        {00, 14, 15, 15, 15, 15, 00, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 17, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 17, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 17, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 17, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 17, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 17, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {18, 15, 15, 15, 15, 15, 17, 00, 00, 00},  
        {14, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 17, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 17, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 17, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 17, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 16, 00, 00, 00},
        {14, 15, 15, 15, 15, 15, 17, 00, 00, 00},
    };

    int[][] razor = {
        {20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
        {20, 21, 21, 22, 22, 22, 22, 21, 22, 20},
        {00, 21, 21, 21, 22, 22, 22, 22, 21, 00},
        {22, 21, 21, 21, 21, 22, 22, 22, 22, 21},
        {22, 22, 21, 21, 21, 21, 22, 22, 22, 22},
        {22, 22, 22, 21, 21, 21, 21, 22, 22, 22},
        {22, 22, 22, 22, 23, 23, 21, 21, 22, 22},
        {21, 23, 22, 23, 23, 24, 24, 21, 23, 22},
        {21, 23, 23, 23, 24, 24, 24, 23, 23, 21},
        {22, 23, 24, 24, 24, 24, 24, 24, 23, 21},
        {22, 23, 21, 24, 24, 24, 24, 22, 23, 21},
        {22, 22, 22, 21, 24, 24, 22, 22, 22, 21},
        {21, 22, 22, 22, 21, 21, 22, 22, 22, 22},
        {21, 21, 22, 22, 22, 21, 21, 22, 22, 22},
        {21, 21, 21, 22, 22, 22, 21, 21, 22, 22},
        {00, 21, 21, 21, 22, 22, 22, 21, 21, 00},
        {20, 21, 21, 21, 21, 22, 22, 22, 21, 20},
        {20, 20, 20, 20, 20, 20, 20, 20, 20, 20},
    };

    int[][] bottleBottom1 = {// 40
        {00, 40, 41, 41, 41, 42, 42, 42, 44, 0},
        {40, 41, 41, 41, 42, 42, 42, 42, 43, 44},
        {40, 41, 41, 41, 42, 42, 42, 42, 43, 44},
        {40, 41, 41, 42, 42, 42, 42, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 42, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 44, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 44, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
        {41, 41, 41, 42, 42, 42, 43, 43, 43, 44},
    };

    int[][] bottleBottom2 = {// 50
        {00, 50, 50, 50, 50, 50, 51, 51, 52, 00},
        {50, 50, 50, 50, 50, 50, 50, 51, 52, 52},
        {50, 50, 50, 50, 50, 50, 50, 51, 51, 52},
        {50, 50, 50, 50, 50, 50, 50, 50, 51, 52},
        {50, 50, 50, 50, 50, 50, 50, 50, 51, 52},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 53, 53, 53, 53, 53, 53, 54},
        {50, 50, 53, 55, 55, 55, 55, 55, 55, 56},
        {50, 53, 55, 55, 57, 55, 55, 55, 57, 56},
        {50, 53, 55, 57, 55, 57, 55, 55, 55, 58},
        {50, 53, 55, 57, 55, 55, 57, 55, 55, 58},
        {50, 53, 55, 57, 55, 55, 55, 57, 55, 58},
        {50, 53, 55, 55, 57, 55, 55, 55, 57, 56},
        {50, 53, 55, 55, 55, 55, 55, 55, 55, 56},
        {50, 53, 55, 57, 57, 57, 57, 57, 57, 58},
        {50, 53, 55, 55, 55, 55, 57, 55, 55, 56},
        {50, 53, 55, 55, 55, 55, 57, 55, 55, 56},
        {50, 53, 55, 55, 55, 55, 57, 55, 55, 56},
        {50, 53, 55, 57, 57, 57, 57, 57, 57, 58},
        {50, 53, 55, 55, 55, 55, 55, 55, 55, 56},
        {50, 53, 55, 55, 55, 57, 57, 57, 57, 58},
        {50, 53, 55, 55, 57, 55, 57, 55, 55, 56},
        {50, 53, 55, 57, 55, 55, 57, 55, 55, 56},
        {50, 53, 55, 55, 57, 55, 57, 55, 55, 56},
        {50, 53, 55, 55, 55, 57, 57, 57, 57, 58},
        {50, 53, 55, 55, 55, 55, 55, 55, 55, 56},
        {50, 53, 55, 57, 57, 57, 57, 57, 57, 56},
        {50, 53, 55, 55, 57, 55, 55, 55, 55, 56},
        {50, 53, 55, 55, 55, 57, 55, 55, 55, 56},
        {50, 53, 55, 55, 55, 55, 57, 55, 55, 56},
        {50, 53, 55, 55, 55, 57, 55, 55, 55, 56},
        {50, 53, 55, 55, 57, 55, 55, 55, 55, 56},
        {50, 53, 55, 57, 57, 57, 57, 57, 57, 58},
        {50, 53, 55, 55, 55, 55, 55, 55, 55, 56},
        {50, 53, 55, 57, 57, 57, 57, 57, 57, 58},
        {50, 53, 55, 57, 55, 55, 57, 55, 55, 56},
        {50, 53, 55, 57, 55, 55, 57, 55, 55, 56},
        {50, 53, 55, 57, 55, 55, 57, 55, 55, 56},
        {50, 53, 55, 55, 57, 57, 55, 55, 55, 56},
        {50, 53, 55, 55, 55, 55, 55, 55, 55, 56},
        {50, 53, 55, 55, 55, 57, 57, 57, 55, 56},
        {50, 53, 55, 55, 57, 55, 55, 55, 57, 56},
        {50, 53, 55, 57, 55, 55, 55, 55, 55, 58},
        {50, 53, 55, 57, 55, 55, 55, 55, 55, 58},
        {50, 53, 55, 55, 57, 55, 55, 55, 57, 56},
        {50, 53, 55, 55, 55, 57, 57, 57, 55, 56},
        {50, 50, 53, 55, 55, 55, 55, 55, 55, 56},
        {50, 53, 55, 55, 55, 57, 57, 57, 55, 56},
        {50, 53, 55, 55, 57, 55, 55, 55, 57, 56},
        {50, 53, 55, 57, 55, 55, 55, 55, 55, 58},
        {50, 53, 55, 57, 55, 55, 55, 55, 55, 58},
        {50, 53, 55, 55, 57, 55, 55, 55, 57, 56},
        {50, 53, 55, 55, 55, 57, 57, 57, 55, 56},
        {50, 50, 50, 53, 53, 53, 53, 53, 53, 54},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
        {50, 50, 50, 50, 50, 50, 50, 50, 50, 51},
    };

    int[][] shavingFoam = {
        {00, 60, 60, 61, 60, 60, 61, 61, 61, 61},
        {60, 60, 61, 61, 60, 60, 61, 60, 60, 61},
        {60, 60, 61, 61, 60, 60, 61, 61, 61, 61},
        {60, 60, 61, 61, 60, 60, 60, 60, 60, 60},
        {60, 60, 61, 61, 61, 61, 61, 61, 61, 00},
        {60, 60, 61, 61, 61, 61, 61, 61, 61, 00},
        {60, 60, 61, 61, 61, 61, 61, 61, 61, 00},
        {60, 60, 61, 61, 61, 61, 61, 61, 61, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
        {62, 63, 62, 63, 63, 62, 64, 64, 62, 00},
    };

    PVector position, velocity;
    float holePosition;
    float holeDepth;
    float obstacleWidth;

    int type;
    float pixelSize;

    Obstacle(float xPosition, float holePosition) {
        this.holePosition = holePosition;

        if (holePosition < height / 4) {
            type = 0;
        } else if (holePosition < height / 2) {
            type = 1;
        } else {
            type = 2;
        }

        this.holeDepth = height / 4;

        this.obstacleWidth = width / 10;
        this.pixelSize = obstacleWidth / 10;
        this.position = new PVector(xPosition, 0);
        this.velocity = new PVector(-5, 0);
    }

    void draw() {
        fill(0);

        switch(type) {
            case 0:
                for (int i = 0; i < bottleBottom1.length; i++) {
                    for (int j = 0; j < bottleBottom1[i].length; j++) {
                        switch(bottleBottom1[i][j]) {
                            case 40:
                                fill(#F87274);
                                break;
                            case 41:
                                fill(#FA1A1F); 
                                break;
                            case 42:
                                fill(#F2FBFF);
                                break;
                            case 43:
                                fill(#2DA2E8);
                                break;
                            case 44:
                                fill(#208FC7);
                                break;
                            case 45:
                                fill(#1a656e);
                                break;
                            case 46:
                                fill(#2ea1e8);
                                break;
                            case 47:
                                fill(#9feefc);
                                break;
                            default:
                                continue;
                        }
                        
                        rect(position.x + (j * pixelSize), holePosition - (i * pixelSize), pixelSize, pixelSize);
                    }
                }

                for (int i = 0; i < toothBrush.length; i++) {
                    for (int j = 0; j < toothBrush[i].length; j++) {
                        switch(toothBrush[i][j]) {
                            case 1:
                                fill(#ffffff);
                                break;
                            case 2:
                                fill(#e2e1df); 
                                break;
                            case 3:
                                fill(#77e1f4);
                                break;
                            case 4:
                                fill(#38b9d7);
                                break;
                            case 5:
                                fill(#358f9f);
                                break;
                            case 6:
                                fill(#1a656e);
                                break;
                            case 7:
                                fill(#2ea1e8);
                                break;
                            case 8:
                                fill(#9feefc);
                                break;
                            default:
                                continue;
                        }
                        
                        rect(position.x + (j * pixelSize), holePosition + holeDepth + (i * pixelSize), pixelSize, pixelSize);
                    }
                }
                break;
            case 1:

                for (int i = 0; i < bottleBottom2.length; i++) {
                    for (int j = 0; j < bottleBottom2[i].length; j++) {
                        switch(bottleBottom2[i][j]) {
                            case 50:
                                fill(#BA94D1); //17
                                break;
                            case 51:
                                fill(#A274B8); //16
                                break;
                            case 52:
                                fill(#9A5CB7); //16
                                break;
                            case 53:
                                fill(#FFF474);
                                break;
                            case 54:
                                fill(#F8C452);
                                break;
                            case 55:
                                fill(#FFFFFF);
                                break;
                            case 56:
                                fill(#d9d9d9);
                                break;
                            case 57:
                                fill(#FFA354);
                                break;
                            case 58:
                                fill(#d98b48);
                                break;
                            default:
                                continue;
                        }
                        
                        rect(position.x + (j * pixelSize), holePosition - (i * pixelSize), pixelSize, pixelSize);
                    }
                }

                for (int i = 0; i < shampoo.length; i++) {
                    for (int j = 0; j < shampoo[i].length; j++) {
                        switch(shampoo[i][j]) {
                            case 10:
                                fill(#FFF474);
                                break;
                            case 11:
                                fill(#F8C452); 
                                break;
                            case 12:
                                fill(#F9A64A);
                                break;
                            case 13:
                                fill(#FFA354);
                                break;
                            case 14:
                                fill(#C2A7DA);
                                break;
                            case 15:
                                fill(#A274B8);
                                break;
                            case 16:
                                fill(#9A5CB7);
                                break;
                            case 17:
                                fill(#BA94D1);
                                break;
                            case 18:
                                fill(#D9B3E6);
                                break;
                            default:
                                continue;
                        }
                        
                        rect(position.x + (j * pixelSize), holePosition + holeDepth + (i * pixelSize), pixelSize, pixelSize);
                    }
                }
                break;
            case 2:
                for (int i = 0; i < razor.length; i++) {
                    for (int j = 0; j < razor[i].length; j++) {
                        switch(razor[i][j]) {
                            case 20:
                                fill(#FFFFFF);
                                break;
                            case 21:
                                fill(#C5D8F2); 
                                break;
                            case 22:
                                fill(#A4B2CA);
                                break;
                            case 23:
                                fill(#333333);
                                break;
                            case 24:
                                fill(#4C4C4C);
                                break;
                            default:
                                continue;
                        }
                        
                        rect(position.x + (j * pixelSize), holePosition + holeDepth + (i * pixelSize), pixelSize, pixelSize);
                    }
                }

                for (int i = 0; i < shavingFoam.length; i++) {
                    for (int j = 0; j < shavingFoam[i].length; j++) {
                        switch(shavingFoam[i][j]) {
                            case 60:
                                fill(#3A4466); //17
                                break;
                            case 61:
                                fill(#5A6987); //16
                                break;
                            case 62:
                                fill(#C0CBDB); //16
                                break;
                            case 63:
                                fill(#8B9AB3);
                                break;
                            case 64:
                                fill(#ECF0F1);
                                break;
                            default:
                                continue;
                        }
                        
                        rect(position.x + (j * pixelSize), holePosition - (i * pixelSize), pixelSize, pixelSize);
                    }
                }
                break;
        }
        // rect(position.x, 0, obstacleWidth, holePosition);
        // rect(position.x, holePosition + holeDepth, obstacleWidth, height);
    }

    void integrate() {
        position.add(velocity);

        if (position.x < -(obstacleWidth)) {
            position.x = width;
            holePosition = random(50, height - 50 - (height / 4));

            if (holePosition < height / 4) {
                type = 0;
            } else if (holePosition < height / 2) {
                type = 1;
            } else {
                type = 2;
            }
        }
    }
}